import pytest
import os
import json
import tempfile
from app.core.persistence import Snapshotter


class TestSnapshotter:

    def test_dump_simple_data(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        snapshotter = Snapshotter(temp_snapshot_file)
        data = {"key1": "value1", "key2": "value2"}
        
        snapshotter.dump(data)
        
        assert os.path.exists(temp_snapshot_file)
        with open(temp_snapshot_file, 'r', encoding='utf-8') as f:
            loaded = json.load(f)
        assert loaded == data

    def test_load_existing_snapshot(self, temp_snapshot_file):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞"""
        data = {"key1": "value1", "key2": "value2"}
        with open(temp_snapshot_file, 'w', encoding='utf-8') as f:
            json.dump(data, f)
        
        snapshotter = Snapshotter(temp_snapshot_file)
        loaded = snapshotter.load()
        
        assert loaded == data

    def test_load_nonexistent_snapshot(self, temp_snapshot_file):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞"""
        os.remove(temp_snapshot_file)
        snapshotter = Snapshotter(temp_snapshot_file)
        
        loaded = snapshotter.load()
        
        assert loaded is None

    def test_dump_empty_data(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        snapshotter = Snapshotter(temp_snapshot_file)
        snapshotter.dump({})
        
        loaded = snapshotter.load()
        assert loaded == {}

    def test_dump_complex_data(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        snapshotter = Snapshotter(temp_snapshot_file)
        data = {
            "string": "text",
            "number": 42,
            "float": 3.14,
            "list": [1, 2, 3],
            "nested": {
                "inner": "value",
                "deep": {
                    "deeper": [True, False, None]
                }
            }
        }
        
        snapshotter.dump(data)
        loaded = snapshotter.load()
        
        assert loaded == data

    def test_dump_unicode_data(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏"""
        snapshotter = Snapshotter(temp_snapshot_file)
        data = {
            "data1": "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä",
            "data2": "‰Ω†Â•Ω‰∏ñÁïå",
            "data3": "‚ñÑÔ∏ª„Éá‚ïê‚ïê‚îÅ‰∏Äüí•"
        }
        
        snapshotter.dump(data)
        loaded = snapshotter.load()
        
        assert loaded == data

    def test_dump_overwrites_existing_file(self, temp_snapshot_file):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        snapshotter = Snapshotter(temp_snapshot_file)
        
        snapshotter.dump({"old": "data"})
        snapshotter.dump({"new": "data"})
        
        loaded = snapshotter.load()
        assert loaded == {"new": "data"}
        assert "old" not in loaded

    def test_directory_creation(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        with tempfile.TemporaryDirectory() as temp_dir:
            snapshot_path = os.path.join(temp_dir, "subdir", "snapshot.json")
            
            snapshotter = Snapshotter(snapshot_path)
            snapshotter.dump({"test": "data"})
            
            assert os.path.exists(snapshot_path)

    def test_load_corrupted_json(self, temp_snapshot_file):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
        with open(temp_snapshot_file, 'w', encoding='UTF-8') as f:
            f.write("{ ‚ñÑÔ∏ª„Éá‚ïê‚ïê‚îÅ‰∏Äüí• }")
        
        snapshotter = Snapshotter(temp_snapshot_file)
        
        with pytest.raises(ValueError, match="–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞"):
            snapshotter.load()

    def test_multiple_dump_load_cycles(self, temp_snapshot_file):
        """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        snapshotter = Snapshotter(temp_snapshot_file)
        
        for i in range(5):
            data = {f"key{i}": f"value{i}"}
            snapshotter.dump(data)
            loaded = snapshotter.load()
            assert loaded == data

    def test_dump_large_dataset(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
        snapshotter = Snapshotter(temp_snapshot_file)
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        data = {f"key{i}": f"value{i}" * 100 for i in range(1000)}
        
        snapshotter.dump(data)
        loaded = snapshotter.load()
        
        assert len(loaded) == 1000
        assert loaded["key0"] == "value0" * 100

    def test_special_characters_in_values(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        snapshotter = Snapshotter(temp_snapshot_file)
        data = {
            "quotes": 'He said "hello"',
            "backslash": "path\\to\\file",
            "newlines": "line1\nline2\nline3",
            "tabs": "col1\tcol2\tcol3"
        }
        
        snapshotter.dump(data)
        loaded = snapshotter.load()
        
        assert loaded == data

    def test_null_values(self, temp_snapshot_file):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è None –∑–Ω–∞—á–µ–Ω–∏–π"""
        snapshotter = Snapshotter(temp_snapshot_file)
        data = {
            "null_value": None,
            "normal_value": "test"
        }
        
        snapshotter.dump(data)
        loaded = snapshotter.load()
        
        assert loaded["null_value"] is None
        assert loaded["normal_value"] == "test"

